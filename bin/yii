#!/usr/bin/env php
<?php

declare(strict_types=1);

require './vendor/autoload.php';

use Psr\SimpleCache\CacheInterface;
use Symfony\Component\Console\Application;
use Yiisoft\Db\Connection\ConnectionInterface;
use Yiisoft\Db\Sqlite\Connection;
use Yiisoft\Db\Sqlite\Driver;
use Yiisoft\Di\Container;
use Yiisoft\Di\ContainerConfig;
use Yiisoft\Test\Support\SimpleCache\MemorySimpleCache;
use Yiisoft\Yii\Db\Migration\Command\CreateCommand;
use Yiisoft\Yii\Db\Migration\Command\DownCommand;
use Yiisoft\Yii\Db\Migration\Command\HistoryCommand;
use Yiisoft\Yii\Db\Migration\Command\NewCommand;
use Yiisoft\Yii\Db\Migration\Command\RedoCommand;
use Yiisoft\Yii\Db\Migration\Command\UpdateCommand;
use Yiisoft\Yii\Db\Migration\Informer\MigrationInformerInterface;
use Yiisoft\Yii\Db\Migration\Informer\NullMigrationInformer;
use Yiisoft\Yii\Db\Migration\Service\MigrationService;

$application = new Application('migration', '1.0.0');

$containerConfig = ContainerConfig::create()->withDefinitions(definitions());
$container = new Container($containerConfig);

if ($container->has(CacheInterface::class) === false) {
    throw new \RuntimeException('CacheInterface not found in container');
}

if ($container->has(ConnectionInterface::class) === false) {
    throw new \RuntimeException('ConnectionInterface not found in container');
}

foreach (getCommands() as $command) {
    $application->add($container->get($command));
}

$application->run();

function getCommands(): array
{
    return [
        CreateCommand::class,
        DownCommand::class,
        HistoryCommand::class,
        NewCommand::class,
        RedoCommand::class,
        UpdateCommand::class,
    ];
}

function definitions(): array
{
    return [
        CacheInterface::class => MemorySimpleCache::class,
        ConnectionInterface::class => [
            'class' => Connection::class,
            '__construct()' => [
                new Driver('sqlite:' . dirname(__DIR__) . '/tests/runtime/yiitest.sq3'),
            ],
        ],
        MigrationService::class => [
            'class' => MigrationService::class,
            'createNamespace()' => [''],
            'createPath()' => [''],
            'updateNamespaces()' => [[]],
            'updatePaths()' => [[]],
        ],
        MigrationInformerInterface::class => NullMigrationInformer::class,
    ];
}
